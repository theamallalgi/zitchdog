local function createTreeSitterGroup(palette, zitch, config)
  return {
    TSNone = {},
    TSError = { fg = palette.red, gui = "bold,underline" },
    TSTitle = zitch.GreenBold,
    TSLiteral = zitch.Green,
    TSURI = { gui = "underline" },
    TSVariable = zitch.Foreground,
    TSPunctDelimiter = zitch.Pink,
    TSPunctBracket = zitch.Foreground,
    TSPunctSpecial = zitch.Purple,
    TSConstant = zitch.Purple,
    TSConstBuiltin = zitch.Purple,
    TSConstMacro = zitch.Purple,
    TSString = zitch.Green,
    TSStringRegex = zitch.GreenBold,
    TSStringEscape = zitch.GreenBold,
    TSCharacter = zitch.Green,
    TSNumber = zitch.Green,
    TSBoolean = zitch.Green,
    TSFloat = zitch.Green,
    TSFunction = zitch.Orange,
    TSFuncBuiltin = zitch.Orange,
    TSFuncMacro = zitch.Orange,
    TSParameter = zitch.Foreground,
    TSParameterReference = zitch.Purple,
    TSMethod = zitch.OrangeBold,
    TSField = zitch.Pink,
    TSProperty = zitch.Pink,
    TSConstructor = zitch.Blue,
    TSAnnotation = zitch.Purple,
    -- TSAttribute = zitch.Red,
    TSNamespace = zitch.Purple,
    TSConditional = zitch.Purple,
    TSRepeat = zitch.Purple,
    TSLabel = zitch.Purple,
    TSOperator = zitch.Purple,
    TSKeyword = zitch.Purple,
    TSKeywordFunction = zitch.Orange,
    TSKeywordOperator = zitch.Purple,
    TSException = zitch.Purple,
    TSType = zitch.Blue,
    TSTypeBuiltin = zitch.Purple,
    TSInclude = zitch.Purple,
    TSVariableBuiltin = zitch.Purple,
    TSText = {},
    TSStrong = { gui = "bold" },
    TSEmphasis = { gui = "italic" },
    TSUnderline = { gui = "underline" },
    TSComment = zitch.Gray,
    TSStructure = zitch.Orange,
    TSTag = zitch.Purple,
    TSTagDelimiter = zitch.Foreground,
  }
end

return {
  create = createTreeSitterGroup,
}
